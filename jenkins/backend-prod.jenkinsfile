pipeline {
   agent any
   stages {
       stage('Github') {
           steps {
               git branch: 'develop', url: 'https://github.com/ZB-Keyword/Keyword-BackEnd.git'
               withCredentials([GitUsernamePassword(credentialsId: 'github_token', gitToolName: 'Default')]) {
                    sh 'git submodule update --init --recursive'
               }
           }
       }
       
       stage('Build') {
           steps {
               sh "chmod +x gradlew"
               sh "./gradlew bootJar"
           }
       }
       
       stage('Deploy') {
           steps {
                dir('build/libs') {
                    script {
                        sshagent(credentials: ['keyword_ssh']) {
                            // 파일 복사
                            sh 'scp -o StrictHostKeyChecking=no keyword-0.0.1-SNAPSHOT.jar ubuntu@${BACKEND_IP}:./'
        
                            // 스크립트 실행
                            def result = sh(script: 'ssh ubuntu@${BACKEND_IP} "sh keyword_run.sh"', returnStatus: true)
                            
                            // 스크립트 실행 결과 출력
                            echo "스크립트 실행 결과: ${result}"
        
                            // 스크립트가 실패한 경우 Jenkins를 중단
                            if (result != 0) {
                                error "스크립트 실행 중 오류 발생"
                            }
                        }
                    }
                }
           }
       }
   }
   post {
        success {
            slackSend (
                channel: '#jenkins-build-alarm', 
                color: '#00FF00', 
                message: """
SUCCESS: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] 
"""
            )
        }
        failure {
            slackSend (
                channel: '#jenkins-build-alarm', 
                color: '#FF0000', 
                message: "FAIL: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})"
            )
        }
    }
}
